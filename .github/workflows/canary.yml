name: Canary Workflow

on:
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch:

jobs:
  canary:
    environment: canary
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      MCPAC_API_KEY: ${{ secrets.MCPAC_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install uv
          uv pip install -e . --system
          # Individually add required packages
          uv pip install fastmcp --system
          uv pip install httpx --system
          uv pip install pydantic --system
          uv pip install rich --system
          uv version

      - name: Deploy
        id: deploy
        run: |
          python canary/deploy_app.py | tee full_deploy.log | tail -n 1 > deploy_output.json
        continue-on-error: false

      - name: Test app
        id: test
        run: |
          APP_URL=$(jq -r '.app_url' deploy_output.json)
          python canary/test_app.py "$APP_URL" | tee full_test.log | tail -n 1 > test_output.json || exit 1

      - name: Normalize status
        if: always()
        run: |
          if jq -e .success test_output.json >/dev/null 2>&1; then
            SUCCESS=$(jq -r '.success' test_output.json)
            if [ "$SUCCESS" = "true" ]; then
              STATUS="success"
            else
              STATUS="failure"
            fi
          else
            STATUS="error"
          fi
          echo "STATUS=$STATUS" >> $GITHUB_ENV

      - name: Log results
        id: log
        run: |
          APP_ID=$(jq -r '.app_id // empty' deploy_output.json)
          DEPLOY_LATENCY=$(jq -r '.latency_s // 0' deploy_output.json)
          TEST_LATENCY=$(jq -r '.latency_s // 0' test_output.json)
          TOTAL_LATENCY=$(echo "$DEPLOY_LATENCY + $TEST_LATENCY" | bc)
          DEPLOY_STDOUT=$(jq -r '.output // ""' deploy_output.json)
          TEST_STDOUT=$(jq -r '.stdout // ""' test_output.json)
          DEPLOY_SUCCESS=$(jq -r '.success // false' deploy_output.json)
          TEST_SUCCESS=$(jq -r '.success // false' test_output.json)
          STATUS=$(jq -r '.success // "unknown"' test_output.json)
      
          echo "üìä Logging results for app_id=$APP_ID (status=$STATUS)"
          echo "  Deploy latency: ${DEPLOY_LATENCY}s"
          echo "  Test latency:   ${TEST_LATENCY}s"
          echo "  Total latency:  ${TOTAL_LATENCY}s"
      
          # Run your Python log script
          python canary/log_result.py \
            "$STATUS" \
            "$APP_ID" \
            "$TOTAL_LATENCY" \
            "$DEPLOY_LATENCY" \
            "$TEST_LATENCY" \
            "$DEPLOY_STDOUT" \
            "" \
            "$TEST_STDOUT" \
            ""
      
          # ‚úÖ Export all environment vars for later steps
          {
            echo "STATUS=$STATUS"
            echo "APP_ID=$APP_ID"
            echo "DEPLOY_LATENCY=$DEPLOY_LATENCY"
            echo "TEST_LATENCY=$TEST_LATENCY"
            echo "TOTAL_LATENCY=$TOTAL_LATENCY"
            echo "DEPLOY_SUCCESS=$DEPLOY_SUCCESS"
            echo "TEST_SUCCESS=$TEST_SUCCESS"
            echo "DEPLOY_STDOUT<<EOF"
            echo "$DEPLOY_STDOUT" | tail -c 500
            echo "EOF"
            echo "TEST_STDOUT<<EOF"
            echo "$TEST_STDOUT" | tail -c 500
            echo "EOF"
          } >> $GITHUB_ENV
          
      - name: Cleanup
        if: always()
        run: |
          APP_ID=$(jq -r '.app_id // empty' deploy_output.json)
          if [ -n "$APP_ID" ]; then
            python canary/delete_app.py "$APP_ID" | tee full_delete.log | tail -n 1 > delete_output.json
          fi
          
    - name: Notify Slack
      if: always()
      uses: slackapi/slack-github-action@v2.1.1
      with:
        webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
        webhook-type: incoming-webhook
        payload: |
          {
            "attachments": [
              {
                "color": "${{ env.STATUS == 'success' && '#36a64f' || env.STATUS == 'failure' && '#9ca3af' || '#e01e5a' }}",
                "blocks": [
                  {
                    "type": "header",
                    "text": { "type": "plain_text", "text": "${{ env.STATUS == 'success' && 'GitHub Actions Canary Passed' || env.STATUS == 'failure' && 'ü™¶ GitHub Actions Canary Failed' || 'GitHub Actions Canary Error' }}" }
                  },
                  {
                    "type": "section",
                    "fields": [
                      { "type": "mrkdwn", "text": "*App ID:*\n${{ env.APP_ID }}" },
                      { "type": "mrkdwn", "text": "*Total Latency:*\n*${{ env.TOTAL_LATENCY }}s*" }
                    ]
                  },
                  {
                    "type": "section",
                    "text": { "type": "mrkdwn", "text": "*${{ env.DEPLOY_SUCCESS == 'true' && '‚úÖ Deploy Output' || '‚ùå Deploy Output' }}*\n```$(echo "${{ env.DEPLOY_STDOUT }}" | head -c 500)```" }
                  },
                  {
                    "type": "section",
                    "text": { "type": "mrkdwn", "text": "*${{ env.TEST_SUCCESS == 'true' && '‚úÖ Tool Call Output' || '‚ùå Tool Call Output' }}*\n```$(echo "${{ env.TEST_STDOUT }}" | head -c 500)```" }
                  },
                  {
                    "type": "context",
                    "elements": [
                      { "type": "mrkdwn", "text": "_Triggered by <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|GitHub Actions Canary Job>_" }
                    ]
                  }
                ]
              }
            ]
          }
