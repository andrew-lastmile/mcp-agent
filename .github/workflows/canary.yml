name: Canary Workflow

on:
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch:

jobs:
  canary:
    environment: canary
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      MCPAC_API_KEY: ${{ secrets.MCPAC_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install uv
          uv pip install -e . --system
          # Individually add required packages
          uv pip install fastmcp --system
          uv pip install httpx --system
          uv pip install pydantic --system
          uv pip install rich --system
          uv version

      - name: Deploy
        id: deploy
        run: |
          python canary/deploy_app.py | tee full_deploy.log | tail -n 1 > deploy_output.json
        continue-on-error: false

      - name: Test app
        id: test
        run: |
          APP_URL=$(jq -r '.app_url' deploy_output.json)
          python canary/test_app.py "$APP_URL" | tee full_test.log | tail -n 1 > test_output.json

      - name: Log results
        id: log
        run: |
          APP_ID=$(jq -r '.app_id // empty' deploy_output.json)
          STATUS=$(jq -r '.success // "unknown"' test_output.json)
          DEPLOY_LATENCY=$(jq -r '.latency_s // 0' deploy_output.json)
          TEST_LATENCY=$(jq -r '.latency_s // 0' test_output.json)
          TOTAL_LATENCY=$(echo "$DEPLOY_LATENCY + $TEST_LATENCY" | bc)
          DEPLOY_STDOUT=$(jq -r '.output // ""' deploy_output.json)
          DEPLOY_STDERR=$(jq -r '.stderr // ""' deploy_output.json)
          TEST_STDOUT=$(jq -r '.stdout // ""' test_output.json)
          TEST_STDERR=$(jq -r '.stderr // ""' test_output.json)

          echo "ðŸ“Š Logging results for app_id=$APP_ID (status=$STATUS)"
          echo "  Deploy latency: ${DEPLOY_LATENCY}s"
          echo "  Test latency:   ${TEST_LATENCY}s"
          echo "  Total latency:  ${TOTAL_LATENCY}s"

          python canary/log_result.py \
            "$STATUS" \
            "$APP_ID" \
            "$TOTAL_LATENCY" \
            "$DEPLOY_LATENCY" \
            "$TEST_LATENCY" \
            "$DEPLOY_STDOUT" \
            "$DEPLOY_STDERR" \
            "$TEST_STDOUT" \
            "$TEST_STDERR"

          # Export for Slack
          echo "STATUS=$STATUS" >> $GITHUB_ENV
          echo "APP_ID=$APP_ID" >> $GITHUB_ENV
          echo "TOTAL_LATENCY=$TOTAL_LATENCY" >> $GITHUB_ENV
          echo "DEPLOY_STDOUT=$(echo "$DEPLOY_STDOUT" | tail -c 500 | jq -Rs .)" >> $GITHUB_ENV
          echo "TEST_STDOUT=$(echo "$TEST_STDOUT" | tail -c 500 | jq -Rs .)" >> $GITHUB_ENV

      - name: Cleanup
        if: always()
        run: |
          APP_ID=$(jq -r '.app_id // empty' deploy_output.json)
          if [ -n "$APP_ID" ]; then
            python canary/delete_app.py "$APP_ID" | tee full_delete.log | tail -n 1 > delete_output.json
          fi

      - name: Notify Slack
        if: always()
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "MCP Canary run completed â€” *${{ env.STATUS }}*"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "*MCP Canary Run Results*"
              - type: "section"
                fields:
                  - type: "mrkdwn"
                    text: "*Status:*\n${{ env.STATUS }}"
                  - type: "mrkdwn"
                    text: "*App ID:*\n${{ env.APP_ID }}"
                  - type: "mrkdwn"
                    text: "*Total Latency:*\n${{ env.TOTAL_LATENCY }}s"
              - type: "context"
                elements:
                  - type: "mrkdwn"
                    text: "_Triggered by GitHub Actions Canary Job â€” <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View logs>_"

      - name: Upload logs to Slack
        if: always()
        run: |
          curl -F file=@full_deploy.log -F "initial_comment=ðŸ§© Deploy log for app $APP_ID" -F channels=${{ secrets.SLACK_CHANNEL_ID }} -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" https://slack.com/api/files.upload
          curl -F file=@full_test.log -F "initial_comment=ðŸ§ª Test log for app $APP_ID" -F channels=${{ secrets.SLACK_CHANNEL_ID }} -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" https://slack.com/api/files.upload
